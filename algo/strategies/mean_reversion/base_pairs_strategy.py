import backtrader as bt
import numpy as np

from algo.cointegration.augmented_dickey_fuller import adf_stationarity
from algo.cointegration.engle_granger import engle_granger_bidirectional


class PairsTradingStrategy(bt.Strategy):

    def __init__(self, * args, **kwargs):
        print(f"Initial Position:\n {self.position}")

        # Tracking
        self.order_buy = None
        self.order_sell = None
        self.order_close0 = None
        self.order_close1 = None

    def next(self):
        raise NotImplementedError

    @property
    def in_market(self) -> bool:
        return self.is_long or self.is_short

    @property
    def is_long(self) -> bool:
        return self.positionsbyname[self.asset0].size > 0.0 and self.positionsbyname[self.asset1].size < 0.0

    @property
    def is_short(self) -> bool:
        return self.positionsbyname[self.asset0].size < 0.0 and self.positionsbyname[self.asset1].size > 0.0

    @property
    def is_order_pending(self) -> bool:
        """
        Returns: True if an order is open to enter positions by buying or selling asset 0 or asset 1.
        """
        return self.order_buy is not None or self.order_sell is not None

    @property
    def is_exit_order_pending(self) -> bool:
        """
        Returns: True if an order is open to exit positions by buying or selling asset 0 or asset 1.
        """
        return self.order_close0 is not None or self.order_close1 is not None

    def log(self, message: str, order) -> None:
        date_time = bt.num2date(order.executed.dt)
        price = np.round(order.executed.price, 2)
        size = np.round(order.executed.size, 3)
        cost = np.round(order.executed.value, 2)
        commission = np.round(order.executed.comm, 2)
        cash = self.broker.get_cash()
        pf_value = self.broker.fundshares * self.broker.fundvalue

        log_output = f"{date_time.isoformat()} {message}"
        log_output += f" Price: {price}, "
        log_output += f"Size: {size}, "
        log_output += f"Cost: {cost}, "
        log_output += f"Commission: {commission}, "
        log_output += f"Cash: {cash}, "
        log_output += f"Pf_value: {pf_value}"

        if order.executed.margin is not None:
            margin = np.round(order.executed.margin, 2)
            log_output += f", Margin: {margin}"

        print(log_output)


def pretrade_checks(S0, S1, spread):
    results = {
        # Test for stationarity in the actual spread series generated by the OU Model.
        "adf_c": adf_stationarity(spread, trend="c"),
        # Test for cointegration in the underlying asset price series.
        # "engle_granger_c": engle_granger_bidirectional(S0, S1, trend="c"),
    }

    print(results)
    # return results["adf_c"]
